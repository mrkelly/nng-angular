!!! 5
//if IE 7
  html(lang="en", class="no-js ie", data-ng-app="main", id="ng-app")
//if IE 8
  html(lang="en", class="no-js ie", data-ng-app="main", id="ng-app")
//if IE 9
  html(lang="en", class="no-js ie9", data-ng-app="main", id="ng-app")
//if [(gt IE 9)|!(IE)] <!
html(class="no-js", ng-app="main")
  // <![endif]
  head
    meta(charset="utf-8")
    title UP Lunch and Learn
    meta(name="viewport", content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no")
    meta(name="apple-mobile-web-app-capable", content="yes")
    meta(name="apple-mobile-web-app-status-bar-style", content="black-translucent")
    meta(name="description", content="NNG Angular Lunch and Learn")
    link(href="./assets/css/style.css", rel="stylesheet", type="text/css")

  body
    .reveal
      .opi-logo
      .slides
        section.index-section(data-state="index-slide")
          .sliding-image-container
            img.animate-logos.angular(src="assets/img/angular.png")
            img.animate-logos.grunt(src="assets/img/grunt-logo.png")
            img.animate-logos.yeoman(src="assets/img/yeoman-logo.png")
            img.animate-logos.node(src="assets/img/node-logo.png")
          .fading-header-container
            h1.animate-headers.angular Angular.js
            h1.animate-headers.grunt Grunt.js
            h1.animate-headers.yeoman Yeoman
            h1.animate-headers.node Node.js
          p.
            Lunch and Learn @ Northern Natural Gas

        section
          h1
            i.icon-github
          p These slides are up on GitHub!
          a(href="http://mrkelly.github.io/nng-angular", target="_blank") mrkelly/nng-angular

        section
          section
            h2 Today's Objective
            p Share our experience building a production application using Angular JS
            p Many of the topics covered are universal to any JS dev
            p We love questions, don't be shy..you cannot derail us (challenge)

          section
            h2 About Us
            p We are NOT experts, just write a ton of code.

            ul
              li Mike Kelly
                a(href="https://twitter.com/mikerkelly", target="_blank") (@mikerkelly)
              li Bruce Coddington
                a(href="https://twitter.com/brucecoddington", target="_blank") (@brucecoddington)

            small We're ALL noobs

        section
          section
            h2 Project Layout

          section
            h2 Objectives
            ul
              li Familiar for enterprise Java devs
              li Clear separation of concerns
              li Compiled code away from written code
              li Obvious (please)
              li Have our favorite libs play together nicely

          section
            h2 Let's take a look
            a(href="https://github.com/brucecoddington/mixtape", target="_blank") Mixtape on Github

        section
          h2 
            a(href="http://yeoman.io/", target="_blank") Yeoman generators

          ul
            li Spearheaded by famous Googlers (Paul Irish and Addy Osmani)
            li Easy to write custom generators to fit your project
            li Helps keep the project structure consistent
            li Can be published as NPM Modules

          a(href="https://npmjs.org/package/generator-mixtape", target="_blank") generator-mixtape

        section
          section
            h2 Build Process

            ul
              li Automate Everything!!
              li Minimize developer interaction (just write the code)
              li Discover devs' complaints and try to eliminate them

          section
            h2
              a(href="http://gruntjs.com/", target="_blank") Grunt

            ul
              li The JavaScript Task Runner
              li A ton of tasks already written to do most anything
              li Easy to extend and write your own tasks
              li Gruntfile.js (let's take a look)

          section
            h3 Watch Task

            pre.
              <code data-trim contenteditable>
              // A task that runs in the background 'watching' for changes to code.
              watch : {
                  options : {
                      livereload: true
                  },
                  client: {
                      files: [
                          'client/src/**/*.js',
                          'client/test/**/*.js',
                          '<%= assetsDir %>/templates/**/*.html'
                      ],
                      tasks: ['assemble', 'karma:unit:run', 'karma:e2e:run']
                  },
                  server : {
                      files: [
                          'test/**/*.js',
                          'app/**/*.js'
                      ],
                      tasks: ['mochacli']
                  },
                  views : {
                      files: [
                          'app/views/**/*.jade',
                          '<%= assetsDir %>/less/**/*.less'
                      ],
                      tasks: ['assemble']
                  }
              }
              </code>
          section
            h3 Server Task

            ul
              li Simple custom Grunt task to serve our index.html locally
              li Gives us 'environments' to run our code in different phases
              li Uses 
                a(href="https://github.com/remy/nodemon", target="_blank") nodemon
                | &nbsp;to monitor for changes (restarts the server)
              li Just a wrapper around the CLI for nodemon

          section
            h3
              a(href="http://www.jshint.com/", target="_blank") JSHINT

            ul
              li Since JavaScript is a dynamic language, it's impossible to get static compilation feedback
              li Check that your code follows best practices
              li Add settings to tweak the linting to your tastes
              li Helps keep the code consistent among the team

          section
            h3
              a(href="http://lesscss.org/", target="_blank") LESS
            ul
              li CSS preprocessor to make life a little easier
              li Adds variables and mixins
              li Twitter Bootstrap is written in LESS

          section
            h3 Minification and Uglification
            p Uglification is the optimization/compression/minimization of source code.  For JavaScript, we use 
              a(href="https://github.com/mishoo/UglifyJS2", target="_blank") UglifyJS2
            ul
              li Parser produces abstract syntax tree
              li AST is optimized into a smaller one by
                ul
                  li Applying optimization transforms
                  li Mangling variables
                  li Analyzing the scope
              li As an added benefit: your source code is obfuscated

          section
            h3 Minification Example
            p Minification results on a real project
            ul
              li 
                strong Original 
                | &nbsp;2611949 bytes (2.49MB)
              li 
                strong Minified 
                | &nbsp;996966 bytes (973.5KB)
              li 
                strong Gzipped 
                | &nbsp;170552 bytes (166.5KB)
              li 15:1 Compression ratio

          section
            h3 Special Considerations
            p Because of mangling, Angular dependency injection and "Pretotyping" no longer works and leads to the infamous:
            pre.
              <code data-trim contenteditable>
              Uncaught Error: Unknown provider: aProvider <- a
              </code>
            ul
              li Convert all modules and components to string argument style  
              li Lets take a look

          section
            h3 Templates
            p Templates are static, so why not provide them as a compiled resource? This is where 
              a(href="https://github.com/ericclemmons/grunt-angular-templates", target="_blank") grunt-angular-templates
              | &nbsp;comes in.
            ol
              li Glob match files and directories
              li The $templateCache service is then preloaded with the static content
              li Template preload file is then uglified with the rest of the source
          section
            h3 Other useful Grunt plugins
            ul
              li
                a(href="https://github.com/shama/grunt-hub", target="_blank") grunt-hub  
                | &nbsp;A Grunt task to watch and run tasks on multiple Grunt projects
              li
                a(href="https://github.com/sindresorhus/grunt-shell", target="_blank") grunt-shell  
                | &nbsp;Grunt task to run shell commands
              li
                a(href="https://github.com/abovethewater/grunt-docco-multi", target="_blank") grunt-docco-multi 
                | &nbsp;Generate&nbsp;
                a(href="http://jashkenas.github.io/docco/", target="_blank") Docco
                | &nbsp;from your source files.
                
        section
          section
            h2 3rd Party Libraries

          section
            h3 
              a(href="http://momentjs.com/", target="_blank") moment.js
            p Arguably the best date formatting library on the planet
            ul
              li Formatting
              li Internationalization
              li Calculations
              li Fuzzy dates

          section
            h3 
              a(href="https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-Browser-Polyfills", target="_blank") HTML5 Shims and Polyfills
            p A long list of libraries for providing standard HTML4 and HTML5 capabilities in "web browsers" (IE)
            ul
              li SVG
              li Form Elements
              li Web Sockets
              li Browser state

          section
            h3 
              a(href="https://github.com/scottjehl/Respond", target="_blank") respond.js
            p respond.js is a CSS3 polyfill for media queries.
            ul
              li Automatic browser detection
              li Fast and lightweight
              li Works great with Twitter Bootstrap
              li Has a few 
                a(href="https://github.com/scottjehl/Respond#support--caveats", target="_blank") caveats
                  
          section
            h3 
              a(href="http://lodash.com/", target="_blank") Lo-dash
            p "A utility library delivering consistency, customization, performance, and extras."
            ul
              li High performance (in some cases beats browser implementations)
              li Has most utility functions you would typically create yourself

          section
            h3 
              a(href="http://getbootstrap.com/", target="_blank") Twitter Bootstrap
            p One of the best base stylesheets and a great place to start with new applications 
            ul
              li Responsive
              li Written in LESS so its easily extendable
              li Bootstrap 3 supports browsers newer than internet explorer 7
              li Fast paint and rendering times
              li Some of the best plugin support

        section
          section
            h2 Automated Testing

            ul
              li Tests should run automatically during build process
              li Should be very easy to write 
              li Logical placement of tests within code

          section
            h3 
              a(href="http://visionmedia.github.io/mocha/", target="_blank") Mocha

            ul
              li Behavior driven development
              li Runs in the browser and on the server (Node)

          section
            h3 
              a(href="http://chaijs.com/", target="_blank") Chai

            ul
              li Assertion library
              li Can actually be used in real code
            
            pre.
              <code data-trim content-editable>
                expect(foo).to.be.a('string');
                expect(foo).to.equal('bar');
                expect(foo).to.have.length(3);
                expect(tea).to.have.property('flavors').with.length(3);
              </code>
            p Check out 
                a(href="https://www.youtube.com/watch?v=-WpDN2k7vbU", target="_blank") this 
                | &nbsp;awesome talk by Rebecca Murphey at JSConf 2013

          section
            h3 
              a(href="http://docs.angularjs.org/guide/dev_guide.e2e-testing", target="_blank") Angular Scenarios

            ul
              li End to End tests
              li Similar to Selenium testing
              li Created by the Angular team so they are 'Angular-aware'
              li Navigate through the browser and check for correct behavior
              li 
                a(href="http://pivotal.github.io/jasmine/", target="_blank") Jasmine
                | &nbsp;syntax (very similar to Mocha)

          section
            h3 
              a(href="http://karma-runner.github.io/0.10/index.html", target="_blank") Karma Integration

            p Spectacular test runner from the Angular JS team

            ul 
              li Run your tests in multiple browsers at once
              li simple configuration
              li 'Debug' mode to see your tests in action in the browser

        section
          section
            h2 Continuous Integration

          section
            h3 Jenkins
            ul
              li Works out of the box
              li Uses development tools
              li Run commands as you would locally

          section
            h3 Git source control
            ul
              li Building a single branch
              li Building multiple branches
              li Special considerations with the workspace

          section
            h3 The Process
            ul
              li Install NPM and Bower packages
              li Run the assembly task
              li Test
              li Record the JUnit test results

          section
            h3 More on Tests
            p More than likely your CI will be running on a headless OS. How do you run end-to-end tests with no display?

          section
            h3
              a(href="http://phantomjs.org/", target="_blank") PhantomJS
            p Phantom JS is a headless WebKit browser
            ul.icons-ul
              li
                i.icon-li.icon-ok
                | Works out of the box
              li
                i.icon-li.icon-ok
                | Scriptable API
              li
                i.icon-li.icon-ok
                | Performance reporting
              li
                i.icon-li.icon-remove
                | Not comparable with Firefox
              li
                i.icon-li.icon-remove
                | It's a WebKit port, not a real browser
          section
            h3
              a(href="http://en.wikipedia.org/wiki/Xvfb", target="_blank") Xvfb
            p.
              <strong>X</strong> <strong>V</strong>irtual <strong>F</strong>rame <strong>B</strong>uffer
              provides a virtual X11 server on a headless device for GUI applications.
            ul.icons-ul
              li
                i.icon-li.icon-ok
                | Color depth and resolutions are customizable
              li
                i.icon-li.icon-ok
                | Easy to install and configure
              li
                i.icon-li.icon-ok
                | Test with Chrome, Firefox, etc.
              li
                i.icon-li.icon-remove
                | *nix only

          section
            h3 Examples

        section
          section
            h2 Angular.js

            ul
              li Teaching the browser new tricks
              li Dependency Injection
              li A bit of a learning curve (but not much)
              li Change the model, let Angular do the rest

          section
            h3 Modules

            ul
              li Small packages of functionality
              li Helps keep the application decoupled and promotes re-use
              li If minifying your code, make sure to use the array syntax
                a(href="https://npmjs.org/package/grunt-ngmin", target="_blank") (or use ng-min)

          section
            h3 Directives

            ul
              li The most powerful part of Angular
              li Meta-framework that you can use to create a DSL for the browser
              li 
                a(href="http://www.youtube.com/watch?v=WqmeI5fZcho&list=TLu6EfJmyWLcE", target="_blank") Great talk by Misko

          section
            h3 
              a(href="https://github.com/angular-ui/ui-router/wiki", target="_blank") UI Router
            ul
              li Cool project by the
                a(href="http://angular-ui.github.io/", target="_blank") Angular UI devs
              li Allows for nested views
              li Provides a complete state machine linked to your urls

        section
          section
            h2 
              a(href="http://joshdmiller.github.io/ng-boilerplate/#/home", target="_blank") ng-boilerplate

            ul
              li Very cool new project
              li Takes a different approach to code organization
              li Modules are self-contained (feels very Web Component-ish)

          section
            h3 Let's take a gander

            a(href="https://github.com/joshdmiller/ng-boilerplate") ng-boilerplate on Github

        section
          section
            h2 Conclusion
          section
            h1
              i.icon-question-sign
            h2 Questions

    script(src="./assets/js/app.js")
